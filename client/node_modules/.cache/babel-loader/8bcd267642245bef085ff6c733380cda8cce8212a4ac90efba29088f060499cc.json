{"ast":null,"code":"var _jsxFileName = \"/home/shihtzhugh/proj/client/src/SavedContracts.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SavedContracts(_ref) {\n  _s();\n  let {\n    userId,\n    savedContracts\n  } = _ref;\n  const [contracts, setContracts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchContracts = async () => {\n      try {\n        const response = await fetch(`/api/saved_contracts/${userId}`);\n        const data = await response.json();\n        if (Array.isArray(data)) {\n          setContracts(data);\n        } else {\n          console.error('Received data is not an array:', data);\n        }\n      } catch (error) {\n        console.error('Error fetching saved contracts:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchContracts();\n  }, [userId, savedContracts]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Saved Contracts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), contracts.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No saved contracts.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: contracts.map(contract => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [contract.contract_ticker, \" - \", contract.contract_type, \" -\", ' ', contract.strike_price, \" - \", contract.expiration_date]\n      }, contract.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(SavedContracts, \"VqI5KMyxtkyHVMlRVK4hiwiiaIw=\");\n_c = SavedContracts;\nexport default SavedContracts;\nvar _c;\n$RefreshReg$(_c, \"SavedContracts\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SavedContracts","_ref","_s","userId","savedContracts","contracts","setContracts","loading","setLoading","fetchContracts","response","fetch","data","json","Array","isArray","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","contract","contract_ticker","contract_type","strike_price","expiration_date","id","_c","$RefreshReg$"],"sources":["/home/shihtzhugh/proj/client/src/SavedContracts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction SavedContracts({ userId, savedContracts }) {\n  const [contracts, setContracts] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchContracts = async () => {\n      try {\n        const response = await fetch(`/api/saved_contracts/${userId}`);\n        const data = await response.json();\n\n        if (Array.isArray(data)) {\n          setContracts(data);\n        } else {\n          console.error('Received data is not an array:', data);\n        }\n      } catch (error) {\n        console.error('Error fetching saved contracts:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchContracts();\n  }, [userId, savedContracts]);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <h2>Saved Contracts</h2>\n      {contracts.length === 0 ? (\n        <p>No saved contracts.</p>\n      ) : (\n        <ul>\n          {contracts.map((contract) => (\n            <li key={contract.id}>\n              {contract.contract_ticker} - {contract.contract_type} -{' '}\n              {contract.strike_price} - {contract.expiration_date}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nexport default SavedContracts;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,cAAcA,CAAAC,IAAA,EAA6B;EAAAC,EAAA;EAAA,IAA5B;IAAEC,MAAM;IAAEC;EAAe,CAAC,GAAAH,IAAA;EAChD,MAAM,CAACI,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMY,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,wBAAuBR,MAAO,EAAC,CAAC;QAC9D,MAAMS,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAElC,IAAIC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE;UACvBN,YAAY,CAACM,IAAI,CAAC;QACpB,CAAC,MAAM;UACLI,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEL,IAAI,CAAC;QACvD;MACF,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACzD,CAAC,SAAS;QACRT,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACN,MAAM,EAAEC,cAAc,CAAC,CAAC;EAE5B,IAAIG,OAAO,EAAE;IACX,oBAAOR,OAAA;MAAAmB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,oBACEvB,OAAA;IAAAmB,QAAA,gBACEnB,OAAA;MAAAmB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACvBjB,SAAS,CAACkB,MAAM,KAAK,CAAC,gBACrBxB,OAAA;MAAAmB,QAAA,EAAG;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAE1BvB,OAAA;MAAAmB,QAAA,EACGb,SAAS,CAACmB,GAAG,CAAEC,QAAQ,iBACtB1B,OAAA;QAAAmB,QAAA,GACGO,QAAQ,CAACC,eAAe,EAAC,KAAG,EAACD,QAAQ,CAACE,aAAa,EAAC,IAAE,EAAC,GAAG,EAC1DF,QAAQ,CAACG,YAAY,EAAC,KAAG,EAACH,QAAQ,CAACI,eAAe;MAAA,GAF5CJ,QAAQ,CAACK,EAAE;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGhB,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACpB,EAAA,CA9CQF,cAAc;AAAA+B,EAAA,GAAd/B,cAAc;AAgDvB,eAAeA,cAAc;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}