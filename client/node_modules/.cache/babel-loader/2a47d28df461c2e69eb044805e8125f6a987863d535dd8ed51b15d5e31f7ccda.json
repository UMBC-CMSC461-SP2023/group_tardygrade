{"ast":null,"code":"import axios from 'axios';\nconst API_KEY = '4Y8_IcV2LK_t8P79dwtYwzCRJuw2bQ9h';\nconst BASE_URL = 'https://api.polygon.io/v3/snapshot/options';\nexport const fetchOptionsContracts = async ticker => {\n  let nextUrl = `${BASE_URL}/${ticker}?limit=50&apiKey=${API_KEY}`;\n  while (nextUrl) {\n    try {\n      const response = await axios.get(nextUrl);\n\n      // Insert or update options contracts data in the PostgreSQL database\n      await insertOrUpdateOptionsContracts(response.data.results);\n\n      // Get the next URL for fetching more options contracts data\n      if (response.data.next_url) {\n        nextUrl = `${response.data.next_url}&apiKey=${API_KEY}`;\n      } else {\n        nextUrl = null; // Break the loop when there are no more options contracts to fetch\n      }\n    } catch (error) {\n      console.error('Error fetching options contracts data:', error);\n      break;\n    }\n  }\n};\nconst insertOrUpdateOptionsContracts = async contracts => {\n  for (const contract of contracts) {\n    const {\n      ticker: contract_ticker,\n      contract_type,\n      exercise_style,\n      expiration_date,\n      shares_per_contract,\n      strike_price\n    } = contract.details;\n    const {\n      ticker: underlying_ticker\n    } = contract.underlying_asset;\n    const {\n      delta,\n      gamma,\n      theta,\n      vega\n    } = contract.greeks || {};\n\n    // Insert or update the contract in the PostgreSQL database\n    await axios.post('api/insert_or_update_contract', {\n      contract_ticker,\n      contract_type,\n      exercise_style,\n      expiration_date,\n      shares_per_contract,\n      strike_price,\n      underlying_ticker,\n      break_even_price: contract.break_even_price || null,\n      open_interest: contract.open_interest || null,\n      greeks_delta: delta || null,\n      greeks_gamma: gamma || null,\n      greeks_theta: theta || null,\n      greeks_vega: vega || null,\n      implied_volatility: contract.implied_volatility || null\n    });\n  }\n};","map":{"version":3,"names":["axios","API_KEY","BASE_URL","fetchOptionsContracts","ticker","nextUrl","response","get","insertOrUpdateOptionsContracts","data","results","next_url","error","console","contracts","contract","contract_ticker","contract_type","exercise_style","expiration_date","shares_per_contract","strike_price","details","underlying_ticker","underlying_asset","delta","gamma","theta","vega","greeks","post","break_even_price","open_interest","greeks_delta","greeks_gamma","greeks_theta","greeks_vega","implied_volatility"],"sources":["/home/shihtzhugh/proj/client/src/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '4Y8_IcV2LK_t8P79dwtYwzCRJuw2bQ9h';\nconst BASE_URL = 'https://api.polygon.io/v3/snapshot/options';\n\nexport const fetchOptionsContracts = async (ticker) => {\n    let nextUrl = `${BASE_URL}/${ticker}?limit=50&apiKey=${API_KEY}`;\n  \n    while (nextUrl) {\n      try {\n        const response = await axios.get(nextUrl);\n  \n        // Insert or update options contracts data in the PostgreSQL database\n        await insertOrUpdateOptionsContracts(response.data.results);\n  \n        // Get the next URL for fetching more options contracts data\n        if (response.data.next_url) {\n          nextUrl = `${response.data.next_url}&apiKey=${API_KEY}`;\n        } else {\n          nextUrl = null; // Break the loop when there are no more options contracts to fetch\n        }\n      } catch (error) {\n        console.error('Error fetching options contracts data:', error);\n        break;\n      }\n    }\n  };\n\nconst insertOrUpdateOptionsContracts = async (contracts) => {\n  for (const contract of contracts) {\n    const {\n      ticker: contract_ticker,\n      contract_type,\n      exercise_style,\n      expiration_date,\n      shares_per_contract,\n      strike_price,\n    } = contract.details;\n    const { ticker: underlying_ticker } = contract.underlying_asset;\n    const { delta, gamma, theta, vega } = contract.greeks || {};\n\n    // Insert or update the contract in the PostgreSQL database\n    await axios.post('api/insert_or_update_contract', {\n      contract_ticker,\n      contract_type,\n      exercise_style,\n      expiration_date,\n      shares_per_contract,\n      strike_price,\n      underlying_ticker,\n      break_even_price: contract.break_even_price || null,\n      open_interest: contract.open_interest || null,\n      greeks_delta: delta || null,\n      greeks_gamma: gamma || null,\n      greeks_theta: theta || null,\n      greeks_vega: vega || null,\n      implied_volatility: contract.implied_volatility || null,\n    });\n  }\n};\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,kCAAkC;AAClD,MAAMC,QAAQ,GAAG,4CAA4C;AAE7D,OAAO,MAAMC,qBAAqB,GAAG,MAAOC,MAAM,IAAK;EACnD,IAAIC,OAAO,GAAI,GAAEH,QAAS,IAAGE,MAAO,oBAAmBH,OAAQ,EAAC;EAEhE,OAAOI,OAAO,EAAE;IACd,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAACF,OAAO,CAAC;;MAEzC;MACA,MAAMG,8BAA8B,CAACF,QAAQ,CAACG,IAAI,CAACC,OAAO,CAAC;;MAE3D;MACA,IAAIJ,QAAQ,CAACG,IAAI,CAACE,QAAQ,EAAE;QAC1BN,OAAO,GAAI,GAAEC,QAAQ,CAACG,IAAI,CAACE,QAAS,WAAUV,OAAQ,EAAC;MACzD,CAAC,MAAM;QACLI,OAAO,GAAG,IAAI,CAAC,CAAC;MAClB;IACF,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAC9D;IACF;EACF;AACF,CAAC;AAEH,MAAMJ,8BAA8B,GAAG,MAAOM,SAAS,IAAK;EAC1D,KAAK,MAAMC,QAAQ,IAAID,SAAS,EAAE;IAChC,MAAM;MACJV,MAAM,EAAEY,eAAe;MACvBC,aAAa;MACbC,cAAc;MACdC,eAAe;MACfC,mBAAmB;MACnBC;IACF,CAAC,GAAGN,QAAQ,CAACO,OAAO;IACpB,MAAM;MAAElB,MAAM,EAAEmB;IAAkB,CAAC,GAAGR,QAAQ,CAACS,gBAAgB;IAC/D,MAAM;MAAEC,KAAK;MAAEC,KAAK;MAAEC,KAAK;MAAEC;IAAK,CAAC,GAAGb,QAAQ,CAACc,MAAM,IAAI,CAAC,CAAC;;IAE3D;IACA,MAAM7B,KAAK,CAAC8B,IAAI,CAAC,+BAA+B,EAAE;MAChDd,eAAe;MACfC,aAAa;MACbC,cAAc;MACdC,eAAe;MACfC,mBAAmB;MACnBC,YAAY;MACZE,iBAAiB;MACjBQ,gBAAgB,EAAEhB,QAAQ,CAACgB,gBAAgB,IAAI,IAAI;MACnDC,aAAa,EAAEjB,QAAQ,CAACiB,aAAa,IAAI,IAAI;MAC7CC,YAAY,EAAER,KAAK,IAAI,IAAI;MAC3BS,YAAY,EAAER,KAAK,IAAI,IAAI;MAC3BS,YAAY,EAAER,KAAK,IAAI,IAAI;MAC3BS,WAAW,EAAER,IAAI,IAAI,IAAI;MACzBS,kBAAkB,EAAEtB,QAAQ,CAACsB,kBAAkB,IAAI;IACrD,CAAC,CAAC;EACJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}